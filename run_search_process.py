import os
import glob
import pandas as pd
import zipfile
from PIL import Image
import io
import tempfile
from openpyxl import Workbook
from openpyxl.drawing.image import Image as OpenpyxlImage
from openpyxl.utils.dataframe import dataframe_to_rows

def extract_docx_pdf_files(directory_path):
    """
    1. „Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂÖ®„Å¶„ÇØ„É≠„Éº„É´„Åó„ÄÅ.docx, .pdf „Éï„Ç°„Ç§„É´„ÇíÊäΩÂá∫
    
    Args:
        directory_path (str): Ê§úÁ¥¢ÂØæË±°„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„Éë„Çπ
        
    Returns:
        list: Ë¶ã„Å§„Åã„Å£„Åü .docx „Å® .pdf „Éï„Ç°„Ç§„É´„ÅÆ„Éë„Çπ„ÅÆ„É™„Çπ„Éà
    """
    found_files = []
    
    try:
        print(f"üîç „Çπ„ÉÜ„ÉÉ„Éó1: „Éá„Ç£„É¨„ÇØ„Éà„É™„ÇØ„É≠„Éº„É´ÈñãÂßã")
        print(f"ÂØæË±°„Éá„Ç£„É¨„ÇØ„Éà„É™: {os.path.abspath(directory_path)}")
        print("-" * 60)
        
        # „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂ≠òÂú®Á¢∫Ë™ç
        if not os.path.exists(directory_path):
            print(f"‚ùå „Ç®„É©„Éº: „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì: {directory_path}")
            return found_files
        
        # .docx „Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢
        docx_pattern = os.path.join(directory_path, "**", "*.docx")
        docx_files = glob.glob(docx_pattern, recursive=True)
        
        # .pdf „Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢
        pdf_pattern = os.path.join(directory_path, "**", "*.pdf")
        pdf_files = glob.glob(pdf_pattern, recursive=True)
        
        # ÊúâÂäπ„Å™„Éï„Ç°„Ç§„É´„ÅÆ„Åø„ÇíËøΩÂä†
        for file_path in docx_files + pdf_files:
            if os.path.isfile(file_path) and os.access(file_path, os.R_OK):
                found_files.append(file_path)
                print(f"  üìÑ Áô∫Ë¶ã: {file_path}")
        
        print("-" * 60)
        print(f"‚úÖ „Çπ„ÉÜ„ÉÉ„Éó1ÂÆå‰∫Ü: ÂêàË®à {len(found_files)} „Éï„Ç°„Ç§„É´Áô∫Ë¶ã (DOCX: {len(docx_files)}, PDF: {len(pdf_files)})")
        
    except Exception as e:
        print(f"‚ùå „Éï„Ç°„Ç§„É´Ê§úÁ¥¢„Ç®„É©„Éº: {str(e)}")
    
    return found_files

def has_images_in_docx(file_path):
    """
    .docx„Éï„Ç°„Ç§„É´„Å´ÁîªÂÉè„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ„Åô„Çã
    """
    try:
        if not os.path.exists(file_path) or not os.access(file_path, os.R_OK):
            return False
            
        with zipfile.ZipFile(file_path, 'r') as zip_file:
            for file_info in zip_file.filelist:
                if file_info.filename.startswith('word/media/'):
                    return True
        return False
    except (zipfile.BadZipFile, PermissionError, OSError):
        return False
    except Exception:
        return False

def has_images_in_pdf(file_path):
    """
    .pdf„Éï„Ç°„Ç§„É´„Å´ÁîªÂÉè„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ„Åô„Çã
    """
    try:
        if not os.path.exists(file_path) or not os.access(file_path, os.R_OK):
            return False
            
        import PyPDF2
        with open(file_path, 'rb') as pdf_file:
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            
            if pdf_reader.is_encrypted:
                try:
                    pdf_reader.decrypt('')
                except:
                    return False
            
            for page_num, page in enumerate(pdf_reader.pages):
                try:
                    if '/Resources' in page and '/XObject' in page['/Resources']:
                        xObject = page['/Resources']['/XObject'].get_object()
                        for obj in xObject:
                            if xObject[obj]['/Subtype'] == '/Image':
                                return True
                except Exception:
                    continue
        return False
    except Exception:
        return False

def filter_files_with_images(file_list):
    """
    2. ÊäΩÂá∫„Åó„Åü„ÇÇ„ÅÆ„Åã„Çâ„ÄÅimg„Éï„Ç°„Ç§„É´„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„ÇÇ„ÅÆ„Å†„Åë„Çí„Åï„Çâ„Å´ÊäΩÂá∫
    
    Args:
        file_list (list): „Éï„Ç°„Ç§„É´„Éë„Çπ„ÅÆ„É™„Çπ„Éà
        
    Returns:
        list: ÁîªÂÉè„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Éï„Ç°„Ç§„É´„ÅÆ„É™„Çπ„Éà
    """
    files_with_images = []
    
    print(f"\nüñºÔ∏è „Çπ„ÉÜ„ÉÉ„Éó2: ÁîªÂÉèÂê´Êúâ„Éï„Ç°„Ç§„É´Âà§ÂÆöÈñãÂßã")
    print("-" * 60)
    
    for i, file_path in enumerate(file_list, 1):
        try:
            print(f"  {i:2d}. „ÉÅ„Çß„ÉÉ„ÇØ‰∏≠: {os.path.basename(file_path)}")
            
            if file_path.endswith('.docx'):
                if has_images_in_docx(file_path):
                    files_with_images.append(file_path)
                    print(f"      ‚úÖ ÁîªÂÉè„ÅÇ„Çä (DOCX)")
                else:
                    print(f"      ‚ùå ÁîªÂÉè„Å™„Åó (DOCX)")
                    
            elif file_path.endswith('.pdf'):
                if has_images_in_pdf(file_path):
                    files_with_images.append(file_path)
                    print(f"      ‚úÖ ÁîªÂÉè„ÅÇ„Çä (PDF)")
                else:
                    print(f"      ‚ùå ÁîªÂÉè„Å™„Åó (PDF)")
        except Exception as e:
            print(f"      ‚ö†Ô∏è „Éï„Ç°„Ç§„É´„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº: {str(e)}")
            continue
    
    print("-" * 60)
    print(f"‚úÖ „Çπ„ÉÜ„ÉÉ„Éó2ÂÆå‰∫Ü: {len(files_with_images)}/{len(file_list)} „Éï„Ç°„Ç§„É´„Å´ÁîªÂÉè„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô")
    
    return files_with_images

def get_media_filenames(file_path):
    """
    .docx„Éï„Ç°„Ç§„É´ÂÜÖ„ÅÆÁîªÂÉè„Éï„Ç°„Ç§„É´Âêç„ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæó„Åô„Çã
    """
    media_filenames = []
    try:
        if not os.path.exists(file_path) or not os.access(file_path, os.R_OK):
            return media_filenames
            
        with zipfile.ZipFile(file_path, 'r') as zip_file:
            for file_info in zip_file.filelist:
                if file_info.filename.startswith('word/media/') and not file_info.is_dir():
                    filename = os.path.basename(file_info.filename)
                    media_filenames.append(filename)
        
        media_filenames.sort()
        
    except Exception:
        pass
    return media_filenames

def extract_images_from_docx(file_path):
    """
    3. .docx„ÅØÂÜÖÈÉ®„Éá„Éº„Çø„ÇíÂ±ïÈñã„Åó„Å¶ÁîªÂÉè„ÇíÊäΩÂá∫
    """
    images = []
    try:
        if not os.path.exists(file_path) or not os.access(file_path, os.R_OK):
            return images
            
        with zipfile.ZipFile(file_path, 'r') as zip_file:
            for file_info in zip_file.filelist:
                if file_info.filename.startswith('word/media/') and not file_info.is_dir():
                    try:
                        image_data = zip_file.read(file_info.filename)
                        if len(image_data) == 0:
                            continue
                            
                        image = Image.open(io.BytesIO(image_data))
                        if image.mode in ('RGBA', 'LA', 'P'):
                            image = image.convert('RGB')
                        images.append(image)
                    except (Image.UnidentifiedImageError, OSError):
                        continue
                    except Exception:
                        continue
    except Exception:
        pass
    return images

def extract_images_from_pdf(file_path):
    """
    PDF„Éï„Ç°„Ç§„É´„Åã„ÇâÁîªÂÉè„ÇíÊäΩÂá∫„Åô„Çã
    """
    images = []
    try:
        if not os.path.exists(file_path) or not os.access(file_path, os.R_OK):
            return images
            
        import PyPDF2
        with open(file_path, 'rb') as pdf_file:
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            
            if pdf_reader.is_encrypted:
                try:
                    pdf_reader.decrypt('')
                except:
                    return images
            
            for page_num, page in enumerate(pdf_reader.pages):
                try:
                    if '/Resources' in page and '/XObject' in page['/Resources']:
                        xObject = page['/Resources']['/XObject'].get_object()
                        for obj in xObject:
                            if xObject[obj]['/Subtype'] == '/Image':
                                try:
                                    img_obj = xObject[obj]
                                    if '/Filter' in img_obj:
                                        if img_obj['/Filter'] == '/DCTDecode':
                                            img_data = img_obj._data
                                            if len(img_data) > 0:
                                                image = Image.open(io.BytesIO(img_data))
                                                if image.mode in ('RGBA', 'LA', 'P'):
                                                    image = image.convert('RGB')
                                                images.append(image)
                                        elif img_obj['/Filter'] == '/FlateDecode':
                                            try:
                                                width = int(img_obj['/Width'])
                                                height = int(img_obj['/Height'])
                                                img_data = img_obj._data
                                                if len(img_data) > 0 and '/ColorSpace' in img_obj:
                                                    if img_obj['/ColorSpace'] == '/DeviceRGB':
                                                        expected_size = width * height * 3
                                                        if len(img_data) >= expected_size:
                                                            image = Image.frombytes('RGB', (width, height), img_data[:expected_size])
                                                            images.append(image)
                                            except (ValueError, TypeError):
                                                continue
                                except Exception:
                                    continue
                except Exception:
                    continue
    except Exception:
        pass
    return images

def resize_image_to_100px(image):
    """
    5. ÁîªÂÉè„Çí100px√ó100px„Å´„É™„Çµ„Ç§„Ç∫„Åô„ÇãÔºà„Ç¢„Çπ„Éö„ÇØ„ÉàÊØî„Çí‰øùÊåÅÔºâ
    """
    try:
        if image.size[0] == 0 or image.size[1] == 0:
            raise ValueError("ÁÑ°Âäπ„Å™ÁîªÂÉè„Çµ„Ç§„Ç∫")
        
        image.thumbnail((100, 100), Image.Resampling.LANCZOS)
        return image
    except Exception:
        fallback_image = Image.new('RGB', (50, 50), 'white')
        return fallback_image

def create_excel_with_images(file_list, output_dir="result", output_filename="Ê§úÁ¥¢ÁµêÊûú.xlsx"):
    """
    4-5. Êñ∞Ë¶èExcel„Çí‰ΩúÊàê„Åó„ÄÅ„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíAÂàó„Å´‰∏¶„Åπ„ÄÅ
         Âüã„ÇÅËæº„Åæ„Çå„Å¶„ÅÑ„Çãimg„Éï„Ç°„Ç§„É´„Çí100px√ó100px„ÅßË°®Á§∫„Åó„Å¶result„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´Âá∫Âäõ
    
    Args:
        file_list (list): ÁîªÂÉèÂê´Êúâ„Éï„Ç°„Ç§„É´„ÅÆ„É™„Çπ„Éà
        output_dir (str): Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™
        output_filename (str): Âá∫Âäõ„Åô„ÇãExcel„Éï„Ç°„Ç§„É´Âêç
    """
    if not file_list:
        print("‚ùå ‰øùÂ≠ò„Åô„Çã„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
        return
    
    print(f"\nüìä „Çπ„ÉÜ„ÉÉ„Éó4-5: Excel‰ΩúÊàê„ÉªÁîªÂÉèË°®Á§∫ÈñãÂßã")
    print("-" * 60)
    
    # Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
    os.makedirs(output_dir, exist_ok=True)
    output_path = os.path.join(output_dir, output_filename)
    
    # Êñ∞„Åó„ÅÑ„ÉØ„Éº„ÇØ„Éñ„ÉÉ„ÇØ„Çí‰ΩúÊàê
    wb = Workbook()
    ws = wb.active
    
    # ÂÖ®„Éï„Ç°„Ç§„É´„ÅÆÁîªÂÉè„Éï„Ç°„Ç§„É´Âêç„ÇíË™øÊüª
    all_image_filenames = set()
    file_image_map = {}
    
    print("  üîç ÁîªÂÉè„Éï„Ç°„Ç§„É´ÂêçË™øÊüª‰∏≠...")
    for file_path in file_list:
        try:
            if file_path.endswith('.docx'):
                media_filenames = get_media_filenames(file_path)
                file_image_map[file_path] = media_filenames
                all_image_filenames.update(media_filenames)
                print(f"    üìÑ {os.path.basename(file_path)}: {len(media_filenames)}ÂÄã„ÅÆÁîªÂÉè")
            elif file_path.endswith('.pdf'):
                images = extract_images_from_pdf(file_path)
                pdf_filenames = [f"pdf_image{i+1}" for i in range(len(images))]
                file_image_map[file_path] = pdf_filenames
                all_image_filenames.update(pdf_filenames)
                print(f"    üìë {os.path.basename(file_path)}: {len(images)}ÂÄã„ÅÆÁîªÂÉè")
        except Exception:
            file_image_map[file_path] = []
    
    # ÁîªÂÉè„Éï„Ç°„Ç§„É´Âêç„Çí„ÇΩ„Éº„Éà
    sorted_image_filenames = sorted(all_image_filenames)
    max_images = len(sorted_image_filenames)
    
    print(f"    üìä „É¶„Éã„Éº„ÇØ„Å™ÁîªÂÉè„Éï„Ç°„Ç§„É´ÂêçÊï∞: {max_images}")
    
    # „Éò„ÉÉ„ÉÄ„Éº„ÇíÂãïÁöÑ„Å´Ë®≠ÂÆö
    ws['A1'] = '„Éï„Ç°„Ç§„É´„Éë„Çπ'
    for i, filename in enumerate(sorted_image_filenames):
        col_letter = chr(ord('B') + i) if i < 25 else f"A{chr(ord('A') + i - 25)}"
        ws[f'{col_letter}1'] = filename
    
    # Ë°å„ÅÆÈ´ò„Åï„ÇíË®≠ÂÆöÔºà100pxÁî®Ôºâ
    for row in range(2, len(file_list) + 2):
        ws.row_dimensions[row].height = 75
    
    # Âàó„ÅÆÂπÖ„ÇíË®≠ÂÆö
    ws.column_dimensions['A'].width = 50
    for i in range(max_images):
        col_letter = chr(ord('B') + i) if i < 25 else f"A{chr(ord('A') + i - 25)}"
        ws.column_dimensions[col_letter].width = 15
    
    temp_files = []
    
    try:
        print("  üñºÔ∏è ÁîªÂÉèÊäΩÂá∫„ÉªÈÖçÁΩÆ‰∏≠...")
        for idx, file_path in enumerate(file_list, start=2):
            try:
                print(f"    {idx-1:2d}. Âá¶ÁêÜ‰∏≠: {os.path.basename(file_path)}")
                
                # AÂàó„Å´„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíË®≠ÂÆö
                ws[f'A{idx}'] = file_path
                
                # ÁîªÂÉè„ÇíÊäΩÂá∫
                images = []
                current_filenames = file_image_map.get(file_path, [])
                
                if file_path.endswith('.docx'):
                    images = extract_images_from_docx(file_path)
                elif file_path.endswith('.pdf'):
                    images = extract_images_from_pdf(file_path)
                
                # ÂÆüÈöõ„ÅÆ„Éï„Ç°„Ç§„É´Âêç„Å®ÁîªÂÉè„ÇíÂØæÂøú‰ªò„Åë„Å¶ÈÖçÁΩÆ
                for img_idx, (filename, image) in enumerate(zip(current_filenames, images)):
                    try:
                        if filename in sorted_image_filenames:
                            col_idx = sorted_image_filenames.index(filename)
                            col_letter = chr(ord('B') + col_idx) if col_idx < 25 else f"A{chr(ord('A') + col_idx - 25)}"
                            
                            # ÁîªÂÉè„Çí100px√ó100px„Å´„É™„Çµ„Ç§„Ç∫
                            resized_image = resize_image_to_100px(image.copy())
                            
                            # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
                            temp_fd, temp_path = tempfile.mkstemp(suffix='.png')
                            temp_files.append(temp_path)
                            
                            try:
                                os.close(temp_fd)
                                resized_image.save(temp_path, 'PNG', optimize=True)
                                
                                if os.path.getsize(temp_path) > 10 * 1024 * 1024:
                                    continue
                                
                                # Excel„Å´ÁîªÂÉè„ÇíÊåøÂÖ•
                                img = OpenpyxlImage(temp_path)
                                img.width = 100
                                img.height = 100
                                
                                cell_location = f'{col_letter}{idx}'
                                ws.add_image(img, cell_location)
                                
                            except Exception:
                                pass
                    except Exception:
                        continue
                
                print(f"        ‚úÖ {len(images)}ÂÄã„ÅÆÁîªÂÉè„ÇíÈÖçÁΩÆÂÆå‰∫Ü")
            except Exception:
                continue
        
        # Excel„Éï„Ç°„Ç§„É´„Çí‰øùÂ≠ò
        try:
            wb.save(output_path)
            print(f"\n‚úÖ „Çπ„ÉÜ„ÉÉ„Éó4-5ÂÆå‰∫Ü: Excel„Éï„Ç°„Ç§„É´„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü")
            print(f"   üìÅ Âá∫Âäõ„Éë„Çπ: {os.path.abspath(output_path)}")
        except (PermissionError, OSError) as e:
            import time
            alt_filename = f"Ê§úÁ¥¢ÁµêÊûú_{int(time.time())}.xlsx"
            alt_path = os.path.join(output_dir, alt_filename)
            wb.save(alt_path)
            print(f"‚úÖ ‰ª£Êõø„Éï„Ç°„Ç§„É´Âêç„Åß‰øùÂ≠ò: {os.path.abspath(alt_path)}")
    
    finally:
        # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        for temp_path in temp_files:
            try:
                if os.path.exists(temp_path):
                    os.unlink(temp_path)
            except Exception:
                pass

def main():
    """
    test_directory„ÇíÂØæË±°„Å®„Åó„Å¶„ÄÅ1Áï™„Åã„ÇâÊ§úÁ¥¢ÁµêÊûúÂÆå‰∫Ü„Åæ„ÅßÂÆüË°å
    """
    # Ê§úÁ¥¢ÂØæË±°„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÊåáÂÆö
    search_directory = "test_directory"  # „É¶„Éº„Ç∂„ÉºÊåáÂÆöÔºà‰øÆÊ≠£Ôºâ
    
    print("üöÄ Ê§úÁ¥¢ÁµêÊûúÂá∫Âäõ„Éó„É≠„Çª„ÇπÈñãÂßã")
    print("=" * 80)
    
    # 1. „Éá„Ç£„É¨„ÇØ„Éà„É™„ÇØ„É≠„Éº„É´
    files = extract_docx_pdf_files(search_directory)
    
    if not files:
        print("‚ùå Ë©≤ÂΩì„Åô„Çã„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")
        return
    
    # 2. ÁîªÂÉèÂê´Êúâ„Éï„Ç°„Ç§„É´Âà§ÂÆö
    files_with_images = filter_files_with_images(files)
    
    if not files_with_images:
        print("‚ùå ÁîªÂÉè„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")
        return
    
    # 3-5. DOCXÂÜÖÈÉ®„Éá„Éº„ÇøÂ±ïÈñã + Excel‰ΩúÊàê + ÁîªÂÉèË°®Á§∫„ÉªÂá∫Âäõ
    create_excel_with_images(files_with_images, "result", "Ê§úÁ¥¢ÁµêÊûú.xlsx")
    
    print("\n" + "=" * 80)
    print("üéâ ÂÖ®„Éó„É≠„Çª„ÇπÂÆå‰∫ÜÔºÅ")
    print("=" * 80)
    print(f"üìä ÊúÄÁµÇÁµêÊûú:")
    print(f"   - Ê§úÁ¥¢ÂØæË±°: {search_directory}")
    print(f"   - Áô∫Ë¶ã„Éï„Ç°„Ç§„É´Êï∞: {len(files)}")
    print(f"   - ÁîªÂÉèÂê´Êúâ„Éï„Ç°„Ç§„É´Êï∞: {len(files_with_images)}")
    print(f"   - Âá∫Âäõ„Éï„Ç°„Ç§„É´: result/Ê§úÁ¥¢ÁµêÊûú.xlsx")
    print("=" * 80)

if __name__ == "__main__":
    main() 